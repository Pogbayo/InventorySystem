// <auto-generated />
using System;
using InventorySystem.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace InventorySystem.Infrastructure.Migrations
{
    [DbContext(typeof(InventorySystemDb))]
    partial class InventorySystemDbModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("InventorySystem.Domain.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("InventorySystem.Domain.Entities.AuditLog", b =>
                {
                    b.Property<Guid>("AuditLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PerformedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AuditLogId");

                    b.ToTable("AuditLogs");

                    b.HasData(
                        new
                        {
                            AuditLogId = new Guid("abcabc01-0000-0000-0000-000000000001"),
                            Action = "Product Added",
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Details = "Product was added",
                            PerformedBy = new Guid("11111111-1111-1111-1111-111111111111")
                        },
                        new
                        {
                            AuditLogId = new Guid("abcabc02-0000-0000-0000-000000000002"),
                            Action = "Warehouse Created",
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Details = "Warehouse created",
                            PerformedBy = new Guid("11111111-1111-1111-1111-111111111111")
                        },
                        new
                        {
                            AuditLogId = new Guid("abcabc03-0000-0000-0000-000000000003"),
                            Action = "Inventory Movement",
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Details = "InventoryMovement recored",
                            PerformedBy = new Guid("11111111-1111-1111-1111-111111111111")
                        });
                });

            modelBuilder.Entity("InventorySystem.Domain.Entities.Category", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Electronics"
                        },
                        new
                        {
                            CategoryId = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Books"
                        },
                        new
                        {
                            CategoryId = new Guid("cccccccc-cccc-cccc-cccc-cccccccccccc"),
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Clothing"
                        },
                        new
                        {
                            CategoryId = new Guid("dddddddd-dddd-dddd-dddd-dddddddddddd"),
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Furniture"
                        },
                        new
                        {
                            CategoryId = new Guid("eeeeeeee-eeee-eeee-eeee-eeeeeeeeeeee"),
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Food"
                        });
                });

            modelBuilder.Entity("InventorySystem.Domain.Entities.InventoryMovement", b =>
                {
                    b.Property<Guid>("InventoryMovementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("MovementDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MovementType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("QuantityChanged")
                        .HasColumnType("int");

                    b.Property<Guid>("WarehouseId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("InventoryMovementId");

                    b.HasIndex("ProductId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("InventoryMovements");

                    b.HasData(
                        new
                        {
                            InventoryMovementId = new Guid("a1a1a1a1-0000-0000-0000-000000000001"),
                            MovementDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            MovementType = "Inbound",
                            ProductId = new Guid("11111111-aaaa-aaaa-aaaa-111111111111"),
                            QuantityChanged = 50,
                            WarehouseId = new Guid("aaaa1111-1111-1111-1111-111111111111")
                        },
                        new
                        {
                            InventoryMovementId = new Guid("b2b2b2b2-0000-0000-0000-000000000002"),
                            MovementDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            MovementType = "Transfer",
                            ProductId = new Guid("22222222-bbbb-bbbb-bbbb-222222222222"),
                            QuantityChanged = 30,
                            WarehouseId = new Guid("dddd4444-4444-4444-4444-444444444444")
                        },
                        new
                        {
                            InventoryMovementId = new Guid("c3c3c3c3-0000-0000-0000-000000000003"),
                            MovementDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            MovementType = "Outbound",
                            ProductId = new Guid("55555555-eeee-eeee-eeee-555555555555"),
                            QuantityChanged = 30,
                            WarehouseId = new Guid("aaaa1111-1111-1111-1111-111111111111")
                        },
                        new
                        {
                            InventoryMovementId = new Guid("d4d4d4d4-0000-0000-0000-000000000004"),
                            MovementDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            MovementType = "Transfer",
                            ProductId = new Guid("33333333-cccc-cccc-cccc-333333333333"),
                            QuantityChanged = 30,
                            WarehouseId = new Guid("eeee5555-5555-5555-5555-555555555555")
                        },
                        new
                        {
                            InventoryMovementId = new Guid("e5e5e5e5-0000-0000-0000-000000000005"),
                            MovementDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            MovementType = "Outbound",
                            ProductId = new Guid("22222222-bbbb-bbbb-bbbb-222222222222"),
                            QuantityChanged = 30,
                            WarehouseId = new Guid("cccc3333-3333-3333-3333-333333333333")
                        });
                });

            modelBuilder.Entity("InventorySystem.Domain.Entities.Product", b =>
                {
                    b.Property<Guid>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("SupplierId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProductId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("SupplierId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = new Guid("11111111-aaaa-aaaa-aaaa-111111111111"),
                            CategoryId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Smartphone",
                            Price = 499.99m,
                            SupplierId = new Guid("1111aaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa")
                        },
                        new
                        {
                            ProductId = new Guid("22222222-bbbb-bbbb-bbbb-222222222222"),
                            CategoryId = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Novel",
                            Price = 19.99m,
                            SupplierId = new Guid("2222bbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb")
                        },
                        new
                        {
                            ProductId = new Guid("33333333-cccc-cccc-cccc-333333333333"),
                            CategoryId = new Guid("cccccccc-cccc-cccc-cccc-cccccccccccc"),
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "T-shirt",
                            Price = 15.99m,
                            SupplierId = new Guid("3333cccc-cccc-cccc-cccc-cccccccccccc")
                        },
                        new
                        {
                            ProductId = new Guid("44444444-dddd-dddd-dddd-444444444444"),
                            CategoryId = new Guid("dddddddd-dddd-dddd-dddd-dddddddddddd"),
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Sofa",
                            Price = 799.99m,
                            SupplierId = new Guid("4444dddd-dddd-dddd-dddd-dddddddddddd")
                        },
                        new
                        {
                            ProductId = new Guid("55555555-eeee-eeee-eeee-555555555555"),
                            CategoryId = new Guid("eeeeeeee-eeee-eeee-eeee-eeeeeeeeeeee"),
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Cereal",
                            Price = 3.49m,
                            SupplierId = new Guid("5555eeee-eeee-eeee-eeee-eeeeeeeeeeee")
                        });
                });

            modelBuilder.Entity("InventorySystem.Domain.Entities.ProductWarehouse", b =>
                {
                    b.Property<Guid>("ProductWarehouseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid>("WarehouseId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProductWarehouseId");

                    b.HasIndex("ProductId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("ProductWarehouses");

                    b.HasData(
                        new
                        {
                            ProductWarehouseId = new Guid("f1f1f1f1-0000-0000-0000-000000000001"),
                            ProductId = new Guid("11111111-aaaa-aaaa-aaaa-111111111111"),
                            Quantity = 150,
                            WarehouseId = new Guid("aaaa1111-1111-1111-1111-111111111111")
                        },
                        new
                        {
                            ProductWarehouseId = new Guid("f9dc1f1f-0000-0000-0000-000000000001"),
                            ProductId = new Guid("22222222-bbbb-bbbb-bbbb-222222222222"),
                            Quantity = 80,
                            WarehouseId = new Guid("bbbb2222-2222-2222-2222-222222222222")
                        },
                        new
                        {
                            ProductWarehouseId = new Guid("0021f1f1-0000-0000-0000-000000000001"),
                            ProductId = new Guid("33333333-cccc-cccc-cccc-333333333333"),
                            Quantity = 200,
                            WarehouseId = new Guid("cccc3333-3333-3333-3333-333333333333")
                        },
                        new
                        {
                            ProductWarehouseId = new Guid("23f1f1f1-0020-0000-0000-000000000001"),
                            ProductId = new Guid("44444444-dddd-dddd-dddd-444444444444"),
                            Quantity = 30,
                            WarehouseId = new Guid("dddd4444-4444-4444-4444-444444444444")
                        },
                        new
                        {
                            ProductWarehouseId = new Guid("fc1b1f1f-0000-0000-0000-000000000001"),
                            ProductId = new Guid("55555555-eeee-eeee-eeee-555555555555"),
                            Quantity = 500,
                            WarehouseId = new Guid("eeee5555-5555-5555-5555-555555555555")
                        });
                });

            modelBuilder.Entity("InventorySystem.Domain.Entities.Supplier", b =>
                {
                    b.Property<Guid>("SupplierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactEmail")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ContactInfo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("SupplierId");

                    b.ToTable("Suppliers");

                    b.HasData(
                        new
                        {
                            SupplierId = new Guid("1111aaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            Address = " 25, Okemagba Avenue, Agege, Lagos State",
                            ContactEmail = "techsupplies@example.com",
                            ContactInfo = "08012345678",
                            Name = "Tech Supplies Co."
                        },
                        new
                        {
                            SupplierId = new Guid("2222bbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            Address = " Ikeja City Mall, Abdulrazak Nwabude Drive",
                            ContactEmail = "bookworld@example.com",
                            ContactInfo = "08123456789",
                            Name = "Book World"
                        },
                        new
                        {
                            SupplierId = new Guid("3333cccc-cccc-cccc-cccc-cccccccccccc"),
                            Address = "10, Broad Street, Lagos Island",
                            ContactEmail = "fashionhub@example.com",
                            ContactInfo = "09012345678",
                            Name = "Fashion Hub"
                        },
                        new
                        {
                            SupplierId = new Guid("4444dddd-dddd-dddd-dddd-dddddddddddd"),
                            Address = "Km 19, Lekki-Epe Expressway, Lekki,",
                            ContactEmail = "furnistore@example.com",
                            ContactInfo = "08087654321",
                            Name = "FurniStore"
                        },
                        new
                        {
                            SupplierId = new Guid("5555eeee-eeee-eeee-eeee-eeeeeeeeeeee"),
                            Address = "21, Ibadan Street, Surulere,",
                            ContactEmail = "grocerymart@example.com",
                            ContactInfo = "08111223344",
                            Name = "Grocery Mart"
                        });
                });

            modelBuilder.Entity("InventorySystem.Domain.Entities.Warehouse", b =>
                {
                    b.Property<Guid>("WarehouseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("WarehouseId");

                    b.ToTable("Warehouses");

                    b.HasData(
                        new
                        {
                            WarehouseId = new Guid("aaaa1111-1111-1111-1111-111111111111"),
                            Location = "Ikeja",
                            Name = "Lagos Warehouse"
                        },
                        new
                        {
                            WarehouseId = new Guid("bbbb2222-2222-2222-2222-222222222222"),
                            Location = "Gwarinpa",
                            Name = "Abuja Warehouse"
                        },
                        new
                        {
                            WarehouseId = new Guid("cccc3333-3333-3333-3333-333333333333"),
                            Location = "D-Line",
                            Name = "Port Harcourt Warehouse"
                        },
                        new
                        {
                            WarehouseId = new Guid("dddd4444-4444-4444-4444-444444444444"),
                            Location = "Kofar Ruwa",
                            Name = "Kano Warehouse"
                        },
                        new
                        {
                            WarehouseId = new Guid("eeee5555-5555-5555-5555-555555555555"),
                            Location = "Abeokuta",
                            Name = "Ogun Warehouse"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("InventorySystem.Domain.Entities.InventoryMovement", b =>
                {
                    b.HasOne("InventorySystem.Domain.Entities.Product", "Product")
                        .WithMany("InventoryMovement")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InventorySystem.Domain.Entities.Warehouse", "Warehouse")
                        .WithMany("InventoryMovements")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("InventorySystem.Domain.Entities.Product", b =>
                {
                    b.HasOne("InventorySystem.Domain.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InventorySystem.Domain.Entities.Supplier", "Supplier")
                        .WithMany("Products")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("InventorySystem.Domain.Entities.ProductWarehouse", b =>
                {
                    b.HasOne("InventorySystem.Domain.Entities.Product", "Product")
                        .WithMany("ProductWarehouses")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InventorySystem.Domain.Entities.Warehouse", "Warehouse")
                        .WithMany("ProductWarehouses")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("InventorySystem.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("InventorySystem.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InventorySystem.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("InventorySystem.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("InventorySystem.Domain.Entities.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("InventorySystem.Domain.Entities.Product", b =>
                {
                    b.Navigation("InventoryMovement");

                    b.Navigation("ProductWarehouses");
                });

            modelBuilder.Entity("InventorySystem.Domain.Entities.Supplier", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("InventorySystem.Domain.Entities.Warehouse", b =>
                {
                    b.Navigation("InventoryMovements");

                    b.Navigation("ProductWarehouses");
                });
#pragma warning restore 612, 618
        }
    }
}
